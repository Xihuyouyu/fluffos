// https://github.com/Microsoft/vscode-cpptools/blob/master/launch.md
// {
//     "configurations": [
//         {
//             "name": "(gdb) 启动",
//             "type": "cppdbg",
//             "request": "launch",
//             "program": "${fileDirname}/${fileBasenameNoExtension}.exe",
//             "args": [],
//             "stopAtEntry": false,
//             "cwd": "${fileDirname}",
//             "environment": [],
//             "externalConsole": false,
//             "MIMode": "gdb",
//             "miDebuggerPath": "C:\\mingw-w64\\mingw64\\bin\\gdb.exe",
//             "setupCommands": [
//                 {
//                     "description": "Enable pretty-printing for gdb",
//                     "text": "-enable-pretty-printing",
//                     "ignoreFailures": false
//                 }
//             ],
//             "preLaunchTask": "gcc" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应
//         }
//     ],
//     "version": "0.2.0",
// }

//cmake教程用
{
    // Use IntelliSense to learn about possible attributes.
    // Hover to view descriptions of existing attributes.
    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387
    "version": "0.2.0",
    "configurations": [
        {
            "name": "Launch Debug", //名称
            "type": "cppdbg", //调试类型，除使用msvc进行调试外，均为该类型
            "request": "launch",
            "program": "${workspaceFolder}/build/src/driver.exe", //指定C/C++程序位置
            "args": [
                "E:/myProjects/k1_server/config_debug.ini"
            ], //指定运行参数
            "stopAtEntry": false,
            // "cwd": "${workspaceFolder}", //指定工作目录
            "cwd": "E:/myProjects/k1_server",
            // "preLaunchTask": "build", //在调试前会先调用build_debug这个task编译构建程序
            "environment": [],
            "externalConsole": false,
            "osx": { //macOS的特定配置
                
                // "miDebuggerPath": "/Applications/Xcode.app/Contents/ Developer/usr/bin/lldb-mi", //修改使用的lldb-mi，一般不需要修改
                "MIMode": "lldb" //指定使用lldb进行调试
            },
            "linux": { //linux的特定配置
                "MIMode": "gdb", //指定使用gdb调试
                "setupCommands": [
                    {
                        "description": "Enable pretty-printing for gdb",
                        "text": "-enable-pretty-printing",
                        "ignoreFailures": true
                    }
                ]
            },
            "windows": { //windows的特定配置
                // "type": "cppvsdbg", //指定使用msvc进行调试
                "type": "cppdbg",
                // "program": "${workspaceFolder}/build/${workspaceFolderBasename}.exe", //指定C/C++程序位置
                "program": "${workspaceFolder}/build/src/driver.exe",
            }
        }
    ]
}

//launch配置
// {
//     "name": "(gdb) Launch", // 配置名称，将会在启动配置的下拉菜单中显示
//     "type": "cppdbg", // 配置类型，cppdbg对应cpptools提供的调试功能；可以认为此处只能是cppdbg
//     "request": "launch", // 请求配置类型，可以为launch（启动）或attach（附加）
//     "program": "${fileDirname}/${fileBasenameNoExtension}.exe", // 将要进行调试的程序的路径
//     "args": [], // 程序调试时传递给程序的命令行参数，一般设为空即可
//     "stopAtEntry": false, // 设为true时程序将暂停在程序入口处，相当于在main上打断点
//     "cwd": "${workspaceFolder}", // 调试程序时的工作目录，此为工作区文件夹；改成${fileDirname}可变为文件所在目录
//     "environment": [], // 环境变量
//     "externalConsole": true, // 为true时使用单独的cmd窗口，与其它IDE一致；18年10月后设为false可调用VSC内置终端
//     "internalConsoleOptions": "neverOpen", // 如果不设为neverOpen，调试时会跳到“调试控制台”选项卡，你应该不需要对gdb手动输命令吧？
//     "MIMode": "gdb", // 指定连接的调试器，可以为gdb或lldb。但我没试过lldb
//     "miDebuggerPath": "gdb.exe", // 调试器路径，Windows下后缀不能省略，Linux下则不要
//     "setupCommands": [
//         { // 模板自带，好像可以更好地显示STL容器的内容，具体作用自行Google
//             "description": "Enable pretty-printing for gdb",
//             "text": "-enable-pretty-printing",
//             "ignoreFailures": false
//         }
//     ],
//     "preLaunchTask": "Compile" // 调试会话开始前执行的任务，一般为编译程序。与tasks.json的label相对应
// }